# specify the instrument. The default set in the code is nircam
instrument: nircam

# specify the list of filetypes to select in the product table, 
# e.g., _uncal.fits or _uncal.jpg.  If only letters, then _ and .fits are added, 
# for example uncal gets expanded to _uncal.fits. Typical image filetypes are uncal, rate, rateints, cal
# Note: with -vv, a list of all filetypes of the observations is shown on screen after the ProductTable
# is queried for the first time. Example: 
# List of all filetypes of obtained products: ['_segm.fits', '_asn.json', '_pool.csv', '_i2d.jpg', '_thumb.jpg', '_cat.ecsv', '_i2d.fits', '_stream.fits', '_uncal.fits', '_uncal.jpg', '_cal.fits', '_trapsfilled.fits', '_cal.jpg', '_rate.jpg', '_rateints.jpg', '_trapsfilled.jpg', '_rate.fits', '_rateints.fits']
filetypes: ['uncal']

# if guidestars is set to True, guidestar products are also included
guidestars: False

# lookback time in days 
# Note that all other time parameters (mjdmin,mjdmax,mjd_limits,lre?) override the lookback time.
lookbacktime: 1.0

# columns returned from MAST to the obsTable
# The default set in the code is mastcolumns_obsTable=['proposal_id','dataURL','obsid','obs_id','t_min','t_exptime']
mastcolumns_obsTable: ['proposal_id','dataURL','obsid','obs_id','t_min','t_exptime']

# output columns for the tables. Note that the columns for the individual filetypes
# are automatically added to the obsTable.
# The defaults set in the code are:
# self.params['outcolumns_productTable']=['proposal_id','obsnum','obsID','parent_obsid','obs_id','dataproduct_type','productFilename','filetype','calib_level','size','description']
# self.params['outcolumns_obsTable']=['proposal_id','obsnum','obsid','obs_id','t_min','t_exptime','date_min']
outcolumns_productTable: ['proposal_id','obsnum','obsID','parent_obsid','obs_id','dataproduct_type','productFilename','filetype','calib_level','size','description']
outcolumns_obsTable:     ['proposal_id','obsnum','obsid','obs_id','t_min','t_exptime','date_min']

# The productTable is sorted based on these columns.
# The defaults set in the code are:
# self.params['sortcols_productTable']=['calib_level','filetype','obsID']
# An alternative would be
# sortcols_productTable: ['obsID','filetype']
sortcols_productTable: ['calib_level','filetype','obsID']

# The obsTable is sorted based on these columns.
# The defaults set in the code are below, sorting the table in the order the observations were observed:
# self.params['sortcols_obsTable']=['date_min','proposal_id','obsnum']
# An alternative would be to sort it by propID and obsnum, and not in the order it was observed
# sortcols_obsTable: ['proposal_id','obsnum']
sortcols_obsTable: ['date_min','proposal_id','obsnum']

# The summary Table is sorted based on these columns.
# The defaults set in the code are below, sorting the table in the order the observations were observed:
# self.params['sortcols_summaryTable']=['date_start','proposal_id','obsnum']
# An alternative would be to sort it by propID and obsnum, and not in the order it was observed
# sortcols_summaryTable: ['proposal_id','obsnum']
sortcols_summaryTable: ['date_start','proposal_id','obsnum']

#####################################################################################################
# The following are other parameters that can be set in the config file, they just need to be uncommented. 
# As a rule, all optional arguments can also be set in the config file. If an optional argument is not None, then it 
# overrides the config file entries

# minimum MJD. overrides lookback time
# mjd_min: 59400.0
# minimum MJD. overrides lookback time
# mjd_max: 59439.0

# MJD limits. overrides lookback time and mjd_min/max 
# mjd_limits: [59400.0,59439.0]

# select which LRE MJD limits to use. LRE overrides lookback time, mjd_min/max, and mjd_limits        
# lre3: True
# lre4: True
# lre5: True
# lre6: True

# save the tables (selected products, obsTable, summary with suffix selprod.txt, obs.txt, summary.txt, respectively) with the specified string as basename
# savetables: ./myoutputtables
